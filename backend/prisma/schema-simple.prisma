// Simplified MongoDB schema for MenuShield
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  ADMIN
  STAFF
  VIEWER
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  passwordHash    String   @map("password_hash")
  firstName       String?  @map("first_name")
  lastName        String?  @map("last_name")
  role            UserRole @default(ADMIN)
  isActive        Boolean  @default(true) @map("is_active")
  lastLoginAt     DateTime? @map("last_login_at")
  
  restaurantId    String   @map("restaurant_id") @db.ObjectId
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Restaurant {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  slug               String   @unique
  description        String?
  contact            String?
  website            String?
  address            String?
  
  showPrices         Boolean  @default(true) @map("show_prices")
  currency           String   @default("EUR")
  timezone           String   @default("UTC")
  
  defaultLanguage    String   @default("en") @map("default_language")
  supportedLanguages String   @default("[\"en\"]") @map("supported_languages")
  
  isActive           Boolean  @default(true) @map("is_active")
  subscriptionTier   String   @default("free") @map("subscription_tier")
  
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  users              User[]
  dishes             Dish[]
  categories         Category[]
  ingredients        Ingredient[]

  @@map("restaurants")
}

model Category {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  color        String
  icon         String?
  displayOrder Int      @default(0) @map("display_order")
  isActive     Boolean  @default(true) @map("is_active")
  
  restaurantId String   @map("restaurant_id") @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  ingredients  Ingredient[]
  dishes       Dish[]

  @@map("categories")
}

model Ingredient {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  allergenTags String    @map("allergen_tags")
  isActive     Boolean   @default(true) @map("is_active")
  
  restaurantId String    @map("restaurant_id") @db.ObjectId
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  categoryId   String?   @map("category_id") @db.ObjectId
  category     Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  dishIngredients DishIngredient[]

  @@map("ingredients")
}

model Dish {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  price            Float?
  allergenTags     String   @map("allergen_tags")
  modificationNote String?  @map("modification_note")
  isModifiable     Boolean  @default(false) @map("is_modifiable")
  isActive         Boolean  @default(true) @map("is_active")
  isFeatured       Boolean  @default(false) @map("is_featured")
  displayOrder     Int      @default(0) @map("display_order")
  imageUrl         String?  @map("image_url")
  
  restaurantId     String   @map("restaurant_id") @db.ObjectId
  restaurant       Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  categoryId       String?  @map("category_id") @db.ObjectId
  category         Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  dishIngredients  DishIngredient[]

  @@map("dishes")
}

model DishIngredient {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  dishId       String @map("dish_id") @db.ObjectId
  ingredientId String @map("ingredient_id") @db.ObjectId
  isOptional   Boolean @default(false) @map("is_optional")
  isCore       Boolean @default(true) @map("is_core")

  dish         Dish       @relation(fields: [dishId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@map("dish_ingredients")
}