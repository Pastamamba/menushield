// Multi-tenant Prisma schema for MenuShield
// This is the new schema with proper tenant isolation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User role enumeration
enum UserRole {
  OWNER        // Restaurant owner - full access
  ADMIN        // Manager - can edit menu, settings
  STAFF        // Staff member - can view menu, limited edit
  VIEWER       // Read-only access
}

// User account model with restaurant relationship
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  passwordHash    String   @map("password_hash")
  firstName       String?  @map("first_name")
  lastName        String?  @map("last_name")
  role            UserRole @default(ADMIN)
  isActive        Boolean  @default(true) @map("is_active")
  lastLoginAt     DateTime? @map("last_login_at")
  
  // Restaurant relationship - CRITICAL for tenant isolation
  restaurantId    String   @map("restaurant_id")
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("users")
}

// Restaurant model - the main tenant entity
model Restaurant {
  id                 String   @id @default(cuid())
  name               String
  slug               String   @unique // For SEO-friendly URLs like /menu/:slug
  description        String?
  contact            String?
  website            String?
  address            String?
  
  // Display settings
  showPrices         Boolean  @default(true) @map("show_prices")
  currency           String   @default("EUR")
  timezone           String   @default("UTC")
  
  // Multilingual settings
  defaultLanguage    String   @default("en") @map("default_language")
  supportedLanguages String   @default("[\"en\"]") @map("supported_languages") @db.Text // JSON array
  
  // Business settings
  isActive           Boolean  @default(true) @map("is_active")
  subscriptionTier   String   @default("free") @map("subscription_tier") // free, premium, enterprise
  
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  // Relationships - all data belongs to restaurant
  users              User[]
  dishes             Dish[]
  categories         Category[]
  ingredients        Ingredient[]
  invitations        RestaurantInvitation[]

  @@map("restaurants")
}

// Category model with restaurant isolation
model Category {
  id           String   @id @default(cuid())
  name         String
  description  String?
  color        String
  icon         String?
  displayOrder Int      @default(0) @map("display_order")
  isActive     Boolean  @default(true) @map("is_active")
  translations String?  @db.Text // JSON object with language-specific names and descriptions
  
  // Restaurant relationship - TENANT ISOLATION
  restaurantId String   @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relationships
  ingredients  Ingredient[]
  dishes       Dish[]

  // Unique constraint within restaurant scope
  @@unique([restaurantId, name])
  @@map("categories")
}

// Ingredient model with restaurant isolation
model Ingredient {
  id           String    @id @default(cuid())
  name         String
  description  String?
  allergenTags String    @map("allergen_tags") @db.Text // JSON array as string
  isActive     Boolean   @default(true) @map("is_active")
  translations String?   @db.Text // JSON object with language-specific names
  
  // Restaurant relationship - TENANT ISOLATION
  restaurantId String    @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  // Category relationship (within same restaurant)
  categoryId   String?   @map("category_id")
  category     Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  // Hierarchy support (within same restaurant)
  parentId     String?   @map("parent_id")
  parent       Ingredient? @relation("IngredientHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     Ingredient[] @relation("IngredientHierarchy")
  
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relationships
  dishIngredients DishIngredient[]

  // Unique constraint within restaurant scope
  @@unique([restaurantId, name])
  @@map("ingredients")
}

// Dish model with restaurant isolation
model Dish {
  id               String   @id @default(cuid())
  name             String
  description      String?  @db.Text
  price            Float?
  allergenTags     String   @map("allergen_tags") @db.Text // JSON array as string
  modificationNote String?  @map("modification_note") @db.Text
  isModifiable     Boolean  @default(false) @map("is_modifiable")
  isActive         Boolean  @default(true) @map("is_active")
  isFeatured       Boolean  @default(false) @map("is_featured")
  displayOrder     Int      @default(0) @map("display_order")
  components       String?  @db.Text // JSON array as string
  translations     String?  @db.Text // JSON object with language-specific content
  imageUrl         String?  @map("image_url")
  
  // Restaurant relationship - TENANT ISOLATION
  restaurantId     String   @map("restaurant_id")
  restaurant       Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  // Category relationship (within same restaurant)
  categoryId       String?  @map("category_id")
  category         Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relationships
  dishIngredients  DishIngredient[]

  // Unique constraint within restaurant scope
  @@unique([restaurantId, name])
  @@map("dishes")
}

// Junction table for dish-ingredient relationships
model DishIngredient {
  id           String @id @default(cuid())
  dishId       String @map("dish_id")
  ingredientId String @map("ingredient_id")
  isOptional   Boolean @default(false) @map("is_optional") // Can be removed
  isCore       Boolean @default(true) @map("is_core")     // Essential ingredient

  dish         Dish       @relation(fields: [dishId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@unique([dishId, ingredientId])
  @@map("dish_ingredients")
}

// Global allergen translations (shared across all restaurants)
model AllergenTranslation {
  id           String   @id @default(cuid())
  allergenKey  String   @unique @map("allergen_key") // e.g., "dairy", "gluten"
  translations String   @db.Text // JSON object with language-specific names and descriptions
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("allergen_translations")
}

// Restaurant invitation system for adding users
model RestaurantInvitation {
  id           String   @id @default(cuid())
  email        String
  role         UserRole
  token        String   @unique
  isUsed       Boolean  @default(false) @map("is_used")
  expiresAt    DateTime @map("expires_at")
  
  restaurantId String   @map("restaurant_id")
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  invitedBy    String   @map("invited_by") // User ID who sent invitation
  
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("restaurant_invitations")
}