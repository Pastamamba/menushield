// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  passwordHash    String   @map("password_hash")
  restaurantName  String   @map("restaurant_name")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Restaurant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  contact     String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("restaurants")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  color       String
  icon        String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  ingredients Ingredient[]

  @@map("categories")
}

model Ingredient {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  categoryId   String?   @map("category_id") @db.ObjectId
  parentId     String?   @map("parent_id") @db.ObjectId
  allergenTags String    @map("allergen_tags") // JSON array as string
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  category Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  parent   Ingredient? @relation("IngredientHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Ingredient[] @relation("IngredientHierarchy")

  dishIngredients DishIngredient[]

  @@map("ingredients")
}

model Dish {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  price            Float?
  category         String?
  allergenTags     String   @map("allergen_tags") // JSON array as string
  modificationNote String?  @map("modification_note")
  isModifiable     Boolean  @default(false) @map("is_modifiable")
  components       String?  // JSON array as string
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  ingredients DishIngredient[]

  @@map("dishes")
}

model DishIngredient {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  dishId       String @map("dish_id") @db.ObjectId
  ingredientId String @map("ingredient_id") @db.ObjectId

  dish       Dish       @relation(fields: [dishId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([dishId, ingredientId])
  @@map("dish_ingredients")
}
